{"version":3,"sources":["Tmdb.js","components/MovieRow/index.js","components/FeaturedMovie/index.js","components/Header/index.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","black","movieList","setMovieList","featureData","setFeatureData","blackHeader","setBlackHeader","useEffect","Tmdb","list","originals","filter","randonChosen","floor","random","chosen","chosenInfo","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","FeaturedMovie","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0125603d.chunk.js","sourcesContent":["const API_KEY = '70d14a59e9888ddf391030b5f2d41fbf'\r\nconst API_BASE = 'https://api.themoviedb.org/3'\r\n\r\nconst basicFetch = async (endpoint) => {\r\n\tconst req = await fetch(`${API_BASE}${endpoint}`)\r\n\tconst json = await req.json()\r\n\treturn json\r\n}\r\n\r\nexport default {\r\n\tgetHomeList: async () => {\r\n\t\treturn [{\r\n\t\t\t\tslug: 'originals',\r\n\t\t\t\ttitle: 'Populares',\r\n\t\t\t\titems: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tslug: 'trending',\r\n\t\t\t\ttitle: 'Recomendados para Você',\r\n\t\t\t\titems: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tslug: 'toprated',\r\n\t\t\t\ttitle: 'Em Alta',\r\n\t\t\t\titems: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tslug: 'action',\r\n\t\t\t\ttitle: 'Ação',\r\n\t\t\t\titems: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tslug: 'comedy',\r\n\t\t\t\ttitle: 'Comédia',\r\n\t\t\t\titems: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tslug: 'horror',\r\n\t\t\t\ttitle: 'Terror',\r\n\t\t\t\titems: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tslug: 'romance',\r\n\t\t\t\ttitle: 'Romance',\r\n\t\t\t\titems: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`),\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tslug: 'documentary',\r\n\t\t\t\ttitle: 'Documentário',\r\n\t\t\t\titems: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`),\r\n\t\t\t},\r\n\t\t]\r\n\t},\r\n\tgetMovieInfo: async (movieId, type) => {\r\n\t\tlet info = {}\r\n\r\n\t\tif (movieId) {\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 'movie':\r\n\t\t\t\t\tinfo = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`)\t\t\r\n\t\t\t\tbreak;\r\n\t\t\t\tcase 'tv':\r\n\t\t\t\t\tinfo = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`)\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn info\r\n\t}\r\n}","import React, {useState} from 'react'\r\nimport './MovieRow.css'\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nexport default ({title, items}) => {\r\n\tconst [scrollX, setScrollX] = useState(0)\r\n\r\n\tconst handleLeftArrow = () => {\r\n\t\tlet x = scrollX + Math.round(window.innerWidth / 2)\r\n\t\tif(x > 0) {\r\n\t\t\tx = 0\r\n\t\t}\r\n\t\tsetScrollX(x)\r\n\t}\r\n\tconst handlerightArrow = () => {\r\n\t\tlet x = scrollX - Math.round(window.innerWidth / 2)\r\n\t\tlet listW = items.results.length * 150\r\n\t\tif((window.innerWidth - listW) > x) {\r\n\t\t\tx = (window.innerWidth - listW) - 60\r\n\t\t}\r\n\t\tsetScrollX(x) \r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"movieRow\">\r\n\t\t\t<h2>{title}</h2>\r\n\t\t\t<div className=\"movieRow-left\" onClick={handleLeftArrow}>\r\n\t\t\t\t<NavigateBeforeIcon style={{fontSize: 50}} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"movieRow-right\" onClick={handlerightArrow}>\r\n\t\t\t\t<NavigateNextIcon style={{fontSize: 50}} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"movieRow-listaArea\">\r\n\t\t\t\t<div className=\"movieRow-list\" style={{\r\n\t\t\t\t\tmarginLeft: scrollX,\r\n\t\t\t\t\twidth: items.results.length * 150,\r\n\t\t\t\t}}>\r\n\t\t\t\t\t{items.results.length > 0 && items.results.map((item, key) => \r\n\t\t\t\t\t<div key={key} className=\"movieRow-item\">\r\n\t\t\t\t\t\t<img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title}/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}","import React from 'react'\r\nimport './FeaturedMovies.css'\r\n\r\nexport default ({item}) => {\r\n\r\n\tlet firstDate = new Date(item.first_air_date)\r\n\tlet genres = []\r\n\tfor(let i in item.genres) {\r\n\t\tgenres.push(item.genres[i].name)\r\n\t}\r\n\r\n\tlet description = item.overview\r\n\tif(description.length > 200) {\r\n\t\tdescription = description.substring(0, 200)+'...'\r\n\t}\r\n\r\n\treturn (\r\n\t\t<section className=\"featured\" \r\n\t\t\tstyle={{\r\n\t\t\t\tbackgroundSize: 'cover',\r\n\t\t\t\tbackgroundPosition: 'center',\r\n\t\t\t\tbackgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`,\r\n\t\t\t}}>\r\n\t\t\t<div className=\"featured-vertical\">\r\n\t\t\t\t<div className=\"featured-horizontal\">\r\n\t\t\t\t\t<div className=\"featured-name\">{item.original_name}</div>\r\n\t\t\t\t\t<div className=\"featured-info\">\r\n\t\t\t\t\t\t<div className=\"featured-points\">{item.vote_average} pontos</div>\r\n\t\t\t\t\t\t<div className=\"featured-year\">{firstDate.getFullYear()}</div>\r\n\t\t\t\t\t\t<div className=\"featured-season\">{item.number_of_seasons} temporada{item.number_of_seasons != 1 ? 's' : ''}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"featured-description\">{description}</div>\r\n\t\t\t\t\t<div className=\"featured-buttons\">\r\n\t\t\t\t\t\t<a className=\"featured-watchButton\" href={`/watch/${item.id}`}>► Assistir</a>\r\n\t\t\t\t\t\t<a className=\"featured-myList\" href={`/list/add/${item.id}`}>+ Minha Lista</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"featured-genres\"><strong>Gêneros:</strong> {genres.join(', ')}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport './Header.css'\r\n\r\nexport default ({black})=>{\r\n  return(\r\n    <header className={black ? 'black' : ''}>\r\n      <div className=\"header-logo\">\r\n        <a href=\"/\">\r\n        \t<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/2560px-Netflix_2015_logo.svg.png\"/>\r\n        </a>\r\n      </div>\r\n      <div className=\"header-user\">\r\n        <a href=\"/\">\r\n        \t<img src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"/>\r\n        </a>\r\n      </div>\r\n    </header>\r\n  )\r\n}","import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport Tmdb from './Tmdb'\nimport MovieRow from './components/MovieRow'\nimport FeaturedMovies from './components/FeaturedMovie'\nimport Header from './components/Header'\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([])\n  const [featureData, setFeatureData] = useState(null)\n  const [blackHeader, setBlackHeader] = useState(false)\n\n  useEffect(()=>{\n    const loadAll = async () => {\n      let list = await Tmdb.getHomeList()\n      setMovieList(list)\n\n      let originals = list.filter(i=> i.slug === 'originals')\n      let randonChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1))\n      let chosen = originals[0].items.results[randonChosen]\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv')\n      setFeatureData(chosenInfo)\n    }\n\n    loadAll()\n  }, [])\n\n  useEffect(() => {\n    const scrollListener = () => {\n      if(window.scrollY > 10) {\n        setBlackHeader(true)\n      }\n      else{\n        setBlackHeader(false)\n      }\n    }\n    window.addEventListener('scroll', scrollListener)\n    \n    return () => {\n      window.removeEventListener('scroll', scrollListener)\n    }\n  })\n\n  return (\n    <div className=\"page\">\n      <Header black={blackHeader}/>\n      {featureData &&\n        <FeaturedMovies item={featureData} />\n      }\n      <section className=\"lists\">\n        {movieList.map((item, key) => \n          <MovieRow key={key} title={item.title} items={item.items}/>  \n        )}\n      </section>\n      <footer>\n        Feito por mim Felipe Costa acompanhando o projeto da B7Web<br/>\n        Diretos de imagem para Netflix<br/>\n        Dados pegos do site Themoviedb.org\n      </footer>\n\n      {movieList.length <= 0 &&\n      <div className=\"loading\">\n        <img src=\"https://media.filmelier.com/noticias/br/2020/03/Netflix_LoadTime.gif\" alt=\"Carregando\"/>\n      </div>\n      }\n    </div>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}